grid_plots <- wrap_plots(plots, ncol = 3)
# Display the grid of plots
print(grid_plots)
colnames(merged_df)
# Merge the dataframes based on artist_spotify
artist_info_ranking <- readRDS("artist_info_ranking.rds")
audio_features_us <- readRDS("audio_features_us.rds")
# Merge the dataframes based on artist_spotify
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
audio_features_us <- readRDS("audio_features_us.rds")
popular_art_aud_feat <- readRDS("popular_artists_audio_features.rds")
colnames(popular_art_aud_feat)
colnames(audio_features_us)
audio_features_us_subset <- audio_features_us %>% select(subset_cols)
subset_cols <- c("artist_spotify",
"track_id",
"artist_id",
"danceability",
"energy",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo")
audio_features_us_subset <- audio_features_us %>% select(subset_cols)
audio_features_us_subset <- audio_features_us %>% select(all_of(subset_cols))
popular_art_aud_feat$is_pop <- "Most Popular Today"
View(audio_features_us_subset)
colnames(artist_info_ranking)
# Merge the dataframes based on artist_spotify
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
audio_features_us <- readRDS("audio_features_us.rds")
#First we need to merge the artist_info_ranking and the audio_feature_us to determine the popular and non popular artists
artist_info_ranking_subset <- artist_info_ranking %>% select(artist_id = id, popularity)
audio_features_us_merged <- merge(audio_features_us, artist_info_ranking_subset, by = artist_id)
audio_features_us_merged <- merge(audio_features_us, artist_info_ranking_subset, by = "artist_id")
colnames(audio_features_us_merged)
#Creating the column is_pop in the audio_features_us_merged
audio_features_us_merged$is_pop <- ifelse(audio_features_us_merged$popularity > 50, "Popular", "Unpopular")
# Merge the dataframes based on artist_spotify
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
audio_features_us <- readRDS("audio_features_us.rds")
#First we need to merge the artist_info_ranking and the audio_feature_us to determine the popular and non popular artists
artist_info_ranking_subset <- artist_info_ranking %>% select(artist_id = id, popularity)
audio_features_us_merged <- merge(audio_features_us, artist_info_ranking_subset, by = "artist_id")
#Creating the column is_pop in the audio_features_us_merged
audio_features_us_merged$is_pop <- ifelse(audio_features_us_merged$popularity > 50, "Popular", "Unpopular")
#Importing the data from the popular artists of 2023 audio features
popular_art_aud_feat <- readRDS("popular_artists_audio_features.rds")
#Creating a column to indicate that these are the most popular artists
popular_art_aud_feat$is_pop <- "Most Popular Today"
#Selecting the columns that will be analised
subset_cols <- c("artist_spotify",
"track_id",
"artist_id",
"is_pop",
"danceability",
"energy",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo")
#Creating the subsets that will be merged to be plotted
audio_features_us_subset <- audio_features_us_merged %>% select(all_of(subset_cols))
popular_art_aud_feat_subset <- popular_art_aud_feat %>% select(all_of(subset_cols))
#The dfs have the same columns, so we will just rbind them
audio_feature_plot_data <- rbind(audio_features_us_subset, popular_art_aud_feat_subset)
View(audio_feature_plot_data)
#The dfs have the same columns, so we will just rbind them
audio_feature_plot_data <- rbind(audio_features_us_subset, popular_art_aud_feat_subset)
# Select relevant columns for comparison
comparison_cols <- c("danceability",
"energy",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo")
ggplot(merged_df, aes(x = relative_pop, y = get(col), fill = relative_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
# Create side-by-side box plots in a grid with 3 columns
plots <- lapply(comparison_cols, function(col) {
ggplot(merged_df, aes(x = relative_pop, y = get(col), fill = relative_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
})
# Create side-by-side box plots in a grid with 3 columns
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = relative_pop, y = get(col), fill = relative_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 3)
# Display the grid of plots
print(grid_plots)
ggplot(audio_feature_plot_data, aes(x = is_pop, y = get(col), fill = is_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = is_pop, y = get(col), fill = is_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 3)
# Display the grid of plots
print(grid_plots)
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
```{r, fig.height=35}
# Merge the dataframes based on artist_spotify
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
audio_features_us <- readRDS("audio_features_us.rds")
#First we need to merge the artist_info_ranking and the audio_feature_us to determine the popular and non popular artists
artist_info_ranking_subset <- artist_info_ranking %>% select(artist_id = id, popularity)
audio_features_us_merged <- merge(audio_features_us, artist_info_ranking_subset, by = "artist_id")
#Creating the column is_pop in the audio_features_us_merged
audio_features_us_merged$is_pop <- ifelse(audio_features_us_merged$popularity > 50, "Popular", "Unpopular")
#Importing the data from the popular artists of 2023 audio features
popular_art_aud_feat <- readRDS("popular_artists_audio_features.rds")
#Creating a column to indicate that these are the most popular artists
popular_art_aud_feat$is_pop <- "Most Popular Today"
#Selecting the columns that will be analised
subset_cols <- c("artist_spotify",
"track_id",
"artist_id",
"is_pop",
"danceability",
"energy",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo")
#Creating the subsets that will be merged to be plotted
audio_features_us_subset <- audio_features_us_merged %>% select(all_of(subset_cols))
popular_art_aud_feat_subset <- popular_art_aud_feat %>% select(all_of(subset_cols))
#The dfs have the same columns, so we will just rbind them
audio_feature_plot_data <- rbind(audio_features_us_subset, popular_art_aud_feat_subset)
# Select relevant columns for comparison
comparison_cols <- c("danceability",
"energy",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo")
# Create side-by-side box plots in a grid with 3 columns
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = is_pop, y = get(col), fill = is_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
ggplot(audio_feature_plot_data, aes(x = track_popularity, y = get(col), color = artist_popularity)) +
geom_point(alpha = 0.3) +
labs(title = paste(col),
#x = "Track Popularity",
#y = col,
#color = "Relative Popularity") +
)+
theme_minimal()+
theme(legend.position = "bottom")
# Create scatter plots in a grid with 3 columns
plots <- lapply(scatter_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = track_popularity, y = get(col), color = artist_popularity)) +
geom_point(alpha = 0.3) +
labs(title = paste(col),
#x = "Track Popularity",
#y = col,
#color = "Relative Popularity") +
)+
theme_minimal()+
theme(legend.position = "bottom")
})
# Create scatter plots in a grid with 3 columns
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = track_popularity, y = get(col), color = artist_popularity)) +
geom_point(alpha = 0.3) +
labs(title = paste(col),
#x = "Track Popularity",
#y = col,
#color = "Relative Popularity") +
)+
theme_minimal()+
theme(legend.position = "bottom")
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 3)
# Display the grid of plots
print(grid_plots)
View(audio_feature_plot_data)
colnames(audio_feature_plot_data)
#Plotting based on artist popularity
plots <- lapply(scatter_cols, function(col) {
ggplot(merged_df, aes(x = get(col), fill = is_popular)) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = custom_colors) +
labs(title = paste("Density Plot of", col),
x = col) +
theme_minimal()+
theme(legend.position = "bottom")
})
custom_colors <- c("#1F78B4", "#FF7F00", "#33A02C")
#Plotting based on artist popularity
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = get(col), fill = is_pop)) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = custom_colors) +
labs(title = paste("Density Plot of", col),
x = col) +
theme_minimal()+
theme(legend.position = "bottom")
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
custom_colors <- c("#1F78B4", "#FF7F00", "#33A02C")
#Plotting based on artist popularity
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = get(col), fill = is_pop)) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = custom_colors) +
labs(title = paste("Density Plot of", col),
x = col) +
theme_minimal()+
theme(legend.position = "bottom")
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
# Subset the data frame to include only the relevant columns
subset_df <- merged_df[c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "artist_popularity")]
custom_colors <- c("#1F78B4", "#FF7F00", "#33A02C")
#Plotting based on artist popularity
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = get(col), fill = is_pop)) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = custom_colors) +
labs(title = paste("Density Plot of", col),
x = col) +
theme_minimal()+
theme(legend.position = "bottom")
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
# Create side-by-side box plots in a grid with 3 columns
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = is_pop, y = get(col), fill = is_pop)) +
geom_boxplot() +
labs(title = paste(col),
x = "Popularity",
y = col) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend for clarity
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
# Select relevant columns for comparison
comparison_cols <- c("danceability",
"energy",
"loudness",
"speechiness",
"acousticness",
"liveness",
"valence",
"tempo")
custom_colors <- c("#1F78B4", "#FF7F00", "#33A02C")
#Plotting based on artist popularity
plots <- lapply(comparison_cols, function(col) {
ggplot(audio_feature_plot_data, aes(x = get(col), fill = is_pop)) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = custom_colors) +
labs(title = paste("Density Plot of", col),
x = col,
fill = "Artist Popularity") +
theme_minimal()+
theme(legend.position = "bottom")
})
# Arrange plots in a grid with 3 columns
grid_plots <- wrap_plots(plots, ncol = 2)
# Display the grid of plots
print(grid_plots)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggpubr) #for stat_cor
library(corrplot) #for correlation table
library(plotly) #making the ggplot interactive
library(viridis) #scale color viridis
library(hrbrthemes)
library(dplyr)
library(knitr) #For printing table of Outlier Summary
library(patchwork)
# Create the plot for band_ended facet
p2 <- ggplot(plot_data %>% filter(is_pop == "Popular Artist"), aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_date(date_breaks = "5 years", date_labels = "%Y", limits = c(as.Date("1958-01-01"), as.Date("2023-12-12") )) +
labs(title = "Track Popularity Over Album Release Dates",
subtitle = "For 'Popular' Artists",
x = "Album Release Date",
y = "Track Popularity") +
theme_minimal() +
ylim(0,100) +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "bottom",
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linetype = "dashed"),
panel.grid.major.y = element_line(linetype = "dashed"),
plot.title = element_text(size = 16, hjust = 0.5, color = "black", face = "bold"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "black")) +
geom_hline(aes(yintercept = 0), linetype = "solid", color = "black", alpha = 0.5)
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
mbdata <- readRDS("./data/mbdata.rds")
#Selecting the necessary variables from each of the datasets
subset_mbdata <- mbdata %>% select(artist_spotify, Begin, End)
subset_artist_info_ranking <- artist_info_ranking %>% select(artist_spotify, artist_id = id, popularity)
subset_top_tracks_us <- top_tracks_us %>% select(artist_spotify, artist_id, track_name, track_id, track_popularity, album.release_date)
merge_data_p3 <- merge(subset_mbdata, subset_artist_info_ranking, by = "artist_spotify")
merge_data_p3 <- merge(merge_data_p3, subset_top_tracks_us, by = "artist_id")
# Convert dates to Date objects
merge_data_p3$Begin <- as.Date(merge_data_p3$Begin)
merge_data_p3$End <- as.Date(merge_data_p3$End)
merge_data_p3$album.release_date <- as.Date(merge_data_p3$album.release_date)
merge_data_p3$band_ended <- ifelse(merge_data_p3$End < merge_data_p3$album.release_date, "Artist not Active Anymore", "Regular Release")
merge_data_p3$band_ended[is.na(merge_data_p3$band_ended)] <- "Regular Release"
merge_data_p3$is_pop <- ifelse(merge_data_p3$popularity > 50, "Popular Artist", "Unpopular Artist")
merge_data_p3$relative_pop <- ifelse(merge_data_p3$popularity > mean(merge_data_p3$popularity), "Relative Popular Artist", "Relative Unpopular Artist")
average_popularity <- merge_data_p3 %>%
group_by(band_ended) %>%
summarise(avg_popularity = mean(popularity))
plot_data <- merge_data_p3 %>% filter(!is.na(album.release_date))
# Create the plot for band_ended facet
p2 <- ggplot(plot_data %>% filter(is_pop == "Popular Artist"), aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_date(date_breaks = "5 years", date_labels = "%Y", limits = c(as.Date("1958-01-01"), as.Date("2023-12-12") )) +
labs(title = "Track Popularity Over Album Release Dates",
subtitle = "For 'Popular' Artists",
x = "Album Release Date",
y = "Track Popularity") +
theme_minimal() +
ylim(0,100) +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "bottom",
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linetype = "dashed"),
panel.grid.major.y = element_line(linetype = "dashed"),
plot.title = element_text(size = 16, hjust = 0.5, color = "black", face = "bold"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "black")) +
geom_hline(aes(yintercept = 0), linetype = "solid", color = "black", alpha = 0.5)
p3 <- ggplot(plot_data %>% filter(is_pop != "Popular Artist"), aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_date(date_breaks = "5 years", date_labels = "%Y", limits = c(as.Date("1958-01-01"), as.Date("2023-12-12") )) +
labs(title = "Track Popularity Over Album Release Dates",
subtitle = "For 'Unpopular' Artists",
x = "Album Release Date",
y = "Track Popularity",
color = "") +
theme_minimal() +
ylim(0,100) +
#xlim(as.Date("1960-01-01"), NA) +
geom_smooth(method = "lm", se = FALSE)+
theme(legend.position = "bottom",
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linetype = "dashed"),
panel.grid.major.y = element_line(linetype = "dashed"),
plot.title = element_text(size = 16, hjust = 0.5, color = "black", face = "bold"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "black")) +
geom_hline(aes(yintercept = 0), linetype = "solid", color = "black", alpha = 0.5)
# Display the plots side by side
library(gridExtra)
grid.arrange(p3, p2, ncol = 2)
# Create the plot for band_ended facet
p2 <- ggplot(plot_data %>% filter(is_pop == "Popular Artist"), aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_date(date_breaks = "5 years", date_labels = "%Y", limits = c(as.Date("1958-01-01"), as.Date("2023-12-12") )) +
labs(title = "Track Popularity Over Album Release Dates",
subtitle = "For 'Popular' Artists",
x = "Album Release Date",
y = "Track Popularity") +
theme_minimal() +
ylim(0,100) +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "bottom",
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linetype = "dashed"),
panel.grid.major.y = element_line(linetype = "dashed"),
plot.title = element_text(size = 16, hjust = 0.5, color = "black", face = "bold"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "black")) +
geom_hline(aes(yintercept = 0), linetype = "solid", color = "black", alpha = 0.5)
p3 <- ggplot(plot_data %>% filter(is_pop != "Popular Artist"), aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
scale_x_date(date_breaks = "5 years", date_labels = "%Y", limits = c(as.Date("1958-01-01"), as.Date("2023-12-12") )) +
labs(title = "Track Popularity Over Album Release Dates",
subtitle = "For 'Unpopular' Artists",
x = "Album Release Date",
y = "Track Popularity",
color = "") +
theme_minimal() +
ylim(0,100) +
#xlim(as.Date("1960-01-01"), NA) +
geom_smooth(method = "lm", se = FALSE)+
theme(legend.position = "bottom",
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linetype = "dashed"),
panel.grid.major.y = element_line(linetype = "dashed"),
plot.title = element_text(size = 16, hjust = 0.5, color = "black", face = "bold"),
plot.subtitle = element_text(size = 12, hjust = 0.5, color = "black")) +
geom_hline(aes(yintercept = 0), linetype = "solid", color = "black", alpha = 0.5)
# Display the plots side by side
library(gridExtra)
grid.arrange(p3, p2, ncol = 2)
artist_info_ranking <- readRDS("artist_info_ranking.rds")
top_tracks_us <- readRDS("top_tracks_us.rds")
mbdata <- readRDS("./data/mbdata.rds")
#Selecting the necessary variables from each of the datasets
subset_mbdata <- mbdata %>% select(artist_spotify, Begin, End)
subset_artist_info_ranking <- artist_info_ranking %>% select(artist_spotify, artist_id = id, popularity)
subset_top_tracks_us <- top_tracks_us %>% select(artist_spotify, artist_id, track_name, track_id, track_popularity, album.release_date)
merge_data_p3 <- merge(subset_mbdata, subset_artist_info_ranking, by = "artist_spotify")
merge_data_p3 <- merge(merge_data_p3, subset_top_tracks_us, by = "artist_id")
# Convert dates to Date objects
merge_data_p3$Begin <- as.Date(merge_data_p3$Begin)
merge_data_p3$End <- as.Date(merge_data_p3$End)
merge_data_p3$album.release_date <- as.Date(merge_data_p3$album.release_date)
merge_data_p3$band_ended <- ifelse(merge_data_p3$End < merge_data_p3$album.release_date, "Artist not Active", "Regular Release")
merge_data_p3$band_ended[is.na(merge_data_p3$band_ended)] <- "Regular Release"
merge_data_p3$is_pop <- ifelse(merge_data_p3$popularity > 50, "Popular Artist", "Unpopular Artist")
average_popularity <- merge_data_p3 %>%
group_by(band_ended) %>%
summarise(avg_popularity = mean(popularity))
plot_data <- merge_data_p3 %>% filter(!is.na(album.release_date))
# Create the plot
p <- ggplot(merge_data_p3, aes(x = album.release_date, y = track_popularity, color = is_pop)) +
geom_point(size = 3, alpha = 0.7) +
#geom_hline(data = average_popularity, aes(yintercept = avg_popularity, color = band_ended), linetype = "dashed", size = 1, show.legend = TRUE) +
scale_x_date(date_breaks = "years", date_labels = "%Y") +
labs(title = "Track Popularity Over Album Release Dates",
x = "Album Release Date",
y = "Track Popularity") +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE)
# Display the plot
print(p)
p <- ggplot(merge_data_p3, aes(x = album.release_date, y = track_popularity, color = band_ended)) +
geom_point(size = 3, alpha = 0.7) +
#geom_hline(data = average_popularity, aes(yintercept = avg_popularity, color = band_ended), linetype = "dashed", size = 1, show.legend = TRUE) +
scale_x_date(date_breaks = "years", date_labels = "%Y") +
labs(title = "Track Popularity Over Album Release Dates",
x = "Album Release Date",
y = "Track Popularity") +
theme_minimal() +
geom_smooth(method = "lm", se = FALSE)
# Display the plot
p
